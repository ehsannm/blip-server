// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package saba

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson66c1e240DecodeGitRonaksoftwareComBlipServerPkgSmsSaba(in *jlexer.Lexer, out *SubscribeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "status_code":
			out.StatusCode = string(in.String())
		case "otp_id":
			out.OtpID = string(in.String())
		case "operator_response":
			easyjson66c1e240Decode(in, &out.OperatorResponse)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGitRonaksoftwareComBlipServerPkgSmsSaba(out *jwriter.Writer, in SubscribeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != "" {
		const prefix string = ",\"status\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if in.StatusCode != "" {
		const prefix string = ",\"status_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StatusCode))
	}
	if in.OtpID != "" {
		const prefix string = ",\"otp_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OtpID))
	}
	if true {
		const prefix string = ",\"operator_response\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson66c1e240Encode(out, in.OperatorResponse)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubscribeResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGitRonaksoftwareComBlipServerPkgSmsSaba(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubscribeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGitRonaksoftwareComBlipServerPkgSmsSaba(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubscribeResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGitRonaksoftwareComBlipServerPkgSmsSaba(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubscribeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGitRonaksoftwareComBlipServerPkgSmsSaba(l, v)
}
func easyjson66c1e240Decode(in *jlexer.Lexer, out *struct {
	StatusInfo struct {
		ReferenceCode       string `json:"referenceCode"`
		StatusCode          string `json:"statusCode"`
		ServerReferenceCode string `json:"serverReferenceCode"`
		OtpTransactionID    string `json:"otpTransactionId"`
	} `json:"statusInfo"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "statusInfo":
			easyjson66c1e240Decode1(in, &out.StatusInfo)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240Encode(out *jwriter.Writer, in struct {
	StatusInfo struct {
		ReferenceCode       string `json:"referenceCode"`
		StatusCode          string `json:"statusCode"`
		ServerReferenceCode string `json:"serverReferenceCode"`
		OtpTransactionID    string `json:"otpTransactionId"`
	} `json:"statusInfo"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"statusInfo\":"
		first = false
		out.RawString(prefix[1:])
		easyjson66c1e240Encode1(out, in.StatusInfo)
	}
	out.RawByte('}')
}
func easyjson66c1e240Decode1(in *jlexer.Lexer, out *struct {
	ReferenceCode       string `json:"referenceCode"`
	StatusCode          string `json:"statusCode"`
	ServerReferenceCode string `json:"serverReferenceCode"`
	OtpTransactionID    string `json:"otpTransactionId"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "referenceCode":
			out.ReferenceCode = string(in.String())
		case "statusCode":
			out.StatusCode = string(in.String())
		case "serverReferenceCode":
			out.ServerReferenceCode = string(in.String())
		case "otpTransactionId":
			out.OtpTransactionID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240Encode1(out *jwriter.Writer, in struct {
	ReferenceCode       string `json:"referenceCode"`
	StatusCode          string `json:"statusCode"`
	ServerReferenceCode string `json:"serverReferenceCode"`
	OtpTransactionID    string `json:"otpTransactionId"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ReferenceCode != "" {
		const prefix string = ",\"referenceCode\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ReferenceCode))
	}
	if in.StatusCode != "" {
		const prefix string = ",\"statusCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StatusCode))
	}
	if in.ServerReferenceCode != "" {
		const prefix string = ",\"serverReferenceCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ServerReferenceCode))
	}
	if in.OtpTransactionID != "" {
		const prefix string = ",\"otpTransactionId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OtpTransactionID))
	}
	out.RawByte('}')
}
func easyjson66c1e240DecodeGitRonaksoftwareComBlipServerPkgSmsSaba1(in *jlexer.Lexer, out *SendSmsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "status_code":
			out.StatusCode = string(in.String())
		case "operator_response":
			out.OperatorResponse = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGitRonaksoftwareComBlipServerPkgSmsSaba1(out *jwriter.Writer, in SendSmsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != "" {
		const prefix string = ",\"status\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if in.StatusCode != "" {
		const prefix string = ",\"status_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StatusCode))
	}
	if in.OperatorResponse != "" {
		const prefix string = ",\"operator_response\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorResponse))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendSmsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGitRonaksoftwareComBlipServerPkgSmsSaba1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendSmsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGitRonaksoftwareComBlipServerPkgSmsSaba1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendSmsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGitRonaksoftwareComBlipServerPkgSmsSaba1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendSmsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGitRonaksoftwareComBlipServerPkgSmsSaba1(l, v)
}
func easyjson66c1e240DecodeGitRonaksoftwareComBlipServerPkgSmsSaba2(in *jlexer.Lexer, out *ConfirmResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "status_code":
			out.StatusCode = string(in.String())
		case "operator_response":
			easyjson66c1e240Decode2(in, &out.OperatorResponse)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGitRonaksoftwareComBlipServerPkgSmsSaba2(out *jwriter.Writer, in ConfirmResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != "" {
		const prefix string = ",\"status\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if in.StatusCode != "" {
		const prefix string = ",\"status_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StatusCode))
	}
	if true {
		const prefix string = ",\"operator_response\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson66c1e240Encode2(out, in.OperatorResponse)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConfirmResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGitRonaksoftwareComBlipServerPkgSmsSaba2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConfirmResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGitRonaksoftwareComBlipServerPkgSmsSaba2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConfirmResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGitRonaksoftwareComBlipServerPkgSmsSaba2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConfirmResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGitRonaksoftwareComBlipServerPkgSmsSaba2(l, v)
}
func easyjson66c1e240Decode2(in *jlexer.Lexer, out *struct {
	StatusInfo struct {
		ReferenceCode       string `json:"referenceCode"`
		StatusCode          string `json:"statusCode"`
		ServerReferenceCode string `json:"serverReferenceCode"`
		TotalAmountCharged  string `json:"totalAmountCharged"`
	} `json:"statusInfo"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "statusInfo":
			easyjson66c1e240Decode3(in, &out.StatusInfo)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240Encode2(out *jwriter.Writer, in struct {
	StatusInfo struct {
		ReferenceCode       string `json:"referenceCode"`
		StatusCode          string `json:"statusCode"`
		ServerReferenceCode string `json:"serverReferenceCode"`
		TotalAmountCharged  string `json:"totalAmountCharged"`
	} `json:"statusInfo"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"statusInfo\":"
		first = false
		out.RawString(prefix[1:])
		easyjson66c1e240Encode3(out, in.StatusInfo)
	}
	out.RawByte('}')
}
func easyjson66c1e240Decode3(in *jlexer.Lexer, out *struct {
	ReferenceCode       string `json:"referenceCode"`
	StatusCode          string `json:"statusCode"`
	ServerReferenceCode string `json:"serverReferenceCode"`
	TotalAmountCharged  string `json:"totalAmountCharged"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "referenceCode":
			out.ReferenceCode = string(in.String())
		case "statusCode":
			out.StatusCode = string(in.String())
		case "serverReferenceCode":
			out.ServerReferenceCode = string(in.String())
		case "totalAmountCharged":
			out.TotalAmountCharged = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240Encode3(out *jwriter.Writer, in struct {
	ReferenceCode       string `json:"referenceCode"`
	StatusCode          string `json:"statusCode"`
	ServerReferenceCode string `json:"serverReferenceCode"`
	TotalAmountCharged  string `json:"totalAmountCharged"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ReferenceCode != "" {
		const prefix string = ",\"referenceCode\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ReferenceCode))
	}
	if in.StatusCode != "" {
		const prefix string = ",\"statusCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StatusCode))
	}
	if in.ServerReferenceCode != "" {
		const prefix string = ",\"serverReferenceCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ServerReferenceCode))
	}
	if in.TotalAmountCharged != "" {
		const prefix string = ",\"totalAmountCharged\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TotalAmountCharged))
	}
	out.RawByte('}')
}
