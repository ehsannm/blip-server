// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package acr

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson66c1e240DecodeGitRonaksoftwareComBlipServerPkgAcr(in *jlexer.Lexer, out *Music) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			easyjson66c1e240Decode(in, &out.Status)
		case "metadata":
			easyjson66c1e240Decode1(in, &out.Metadata)
		case "result_type":
			out.ResultType = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGitRonaksoftwareComBlipServerPkgAcr(out *jwriter.Writer, in Music) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		easyjson66c1e240Encode(out, in.Status)
	}
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		easyjson66c1e240Encode1(out, in.Metadata)
	}
	{
		const prefix string = ",\"result_type\":"
		out.RawString(prefix)
		out.Int(int(in.ResultType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Music) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGitRonaksoftwareComBlipServerPkgAcr(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Music) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGitRonaksoftwareComBlipServerPkgAcr(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Music) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGitRonaksoftwareComBlipServerPkgAcr(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Music) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGitRonaksoftwareComBlipServerPkgAcr(l, v)
}
func easyjson66c1e240Decode1(in *jlexer.Lexer, out *struct {
	PlayedDuration int `json:"played_duration"`
	Music          []struct {
		ExternalIDs struct {
			Isrc string `json:"isrc"`
			Upc  string `json:"upc"`
		} `json:"external_ids"`
		SampleBeginTimeOffsetMs string `json:"sample_begin_time_offset_ms"`
		Label                   string `json:"label"`
		ExternalMetadata        struct {
			Spotify struct {
				Album struct {
					ID string `json:"id"`
				} `json:"album"`
				Artists []struct {
					ID string `json:"id"`
				}
				Track struct {
					ID string `json:"id"`
				} `json:"track"`
			} `json:"spotify"`
		} `json:"external_metadata"`
		PlayOffsetMS int `json:"play_offset_ms"`
		Artists      []struct {
			Name string `json:"name"`
		} `json:"artists"`
		SampleEndTimeOffsetMS string `json:"sample_end_time_offset_ms"`
		ReleaseDate           string `json:"release_date"`
		Title                 string `json:"title"`
		DbEndTimeOffsetMS     string `json:"db_end_time_offset_ms"`
		DbBeginTimeOffsetMS   string `json:"db_begin_time_offset_ms"`
		DurationMS            int    `json:"duration_ms"`
		Album                 struct {
			Name string `json:"name"`
		} `json:"album"`
		Score int `json:"score"`
	} `json:"music"`
	TimestampUTC string `json:"timestamp_utc"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "played_duration":
			out.PlayedDuration = int(in.Int())
		case "music":
			if in.IsNull() {
				in.Skip()
				out.Music = nil
			} else {
				in.Delim('[')
				if out.Music == nil {
					if !in.IsDelim(']') {
						out.Music = make([]struct {
							ExternalIDs struct {
								Isrc string `json:"isrc"`
								Upc  string `json:"upc"`
							} `json:"external_ids"`
							SampleBeginTimeOffsetMs string `json:"sample_begin_time_offset_ms"`
							Label                   string `json:"label"`
							ExternalMetadata        struct {
								Spotify struct {
									Album struct {
										ID string `json:"id"`
									} `json:"album"`
									Artists []struct {
										ID string `json:"id"`
									}
									Track struct {
										ID string `json:"id"`
									} `json:"track"`
								} `json:"spotify"`
							} `json:"external_metadata"`
							PlayOffsetMS int `json:"play_offset_ms"`
							Artists      []struct {
								Name string `json:"name"`
							} `json:"artists"`
							SampleEndTimeOffsetMS string `json:"sample_end_time_offset_ms"`
							ReleaseDate           string `json:"release_date"`
							Title                 string `json:"title"`
							DbEndTimeOffsetMS     string `json:"db_end_time_offset_ms"`
							DbBeginTimeOffsetMS   string `json:"db_begin_time_offset_ms"`
							DurationMS            int    `json:"duration_ms"`
							Album                 struct {
								Name string `json:"name"`
							} `json:"album"`
							Score int `json:"score"`
						}, 0, 1)
					} else {
						out.Music = []struct {
							ExternalIDs struct {
								Isrc string `json:"isrc"`
								Upc  string `json:"upc"`
							} `json:"external_ids"`
							SampleBeginTimeOffsetMs string `json:"sample_begin_time_offset_ms"`
							Label                   string `json:"label"`
							ExternalMetadata        struct {
								Spotify struct {
									Album struct {
										ID string `json:"id"`
									} `json:"album"`
									Artists []struct {
										ID string `json:"id"`
									}
									Track struct {
										ID string `json:"id"`
									} `json:"track"`
								} `json:"spotify"`
							} `json:"external_metadata"`
							PlayOffsetMS int `json:"play_offset_ms"`
							Artists      []struct {
								Name string `json:"name"`
							} `json:"artists"`
							SampleEndTimeOffsetMS string `json:"sample_end_time_offset_ms"`
							ReleaseDate           string `json:"release_date"`
							Title                 string `json:"title"`
							DbEndTimeOffsetMS     string `json:"db_end_time_offset_ms"`
							DbBeginTimeOffsetMS   string `json:"db_begin_time_offset_ms"`
							DurationMS            int    `json:"duration_ms"`
							Album                 struct {
								Name string `json:"name"`
							} `json:"album"`
							Score int `json:"score"`
						}{}
					}
				} else {
					out.Music = (out.Music)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						ExternalIDs struct {
							Isrc string `json:"isrc"`
							Upc  string `json:"upc"`
						} `json:"external_ids"`
						SampleBeginTimeOffsetMs string `json:"sample_begin_time_offset_ms"`
						Label                   string `json:"label"`
						ExternalMetadata        struct {
							Spotify struct {
								Album struct {
									ID string `json:"id"`
								} `json:"album"`
								Artists []struct {
									ID string `json:"id"`
								}
								Track struct {
									ID string `json:"id"`
								} `json:"track"`
							} `json:"spotify"`
						} `json:"external_metadata"`
						PlayOffsetMS int `json:"play_offset_ms"`
						Artists      []struct {
							Name string `json:"name"`
						} `json:"artists"`
						SampleEndTimeOffsetMS string `json:"sample_end_time_offset_ms"`
						ReleaseDate           string `json:"release_date"`
						Title                 string `json:"title"`
						DbEndTimeOffsetMS     string `json:"db_end_time_offset_ms"`
						DbBeginTimeOffsetMS   string `json:"db_begin_time_offset_ms"`
						DurationMS            int    `json:"duration_ms"`
						Album                 struct {
							Name string `json:"name"`
						} `json:"album"`
						Score int `json:"score"`
					}
					easyjson66c1e240Decode2(in, &v1)
					out.Music = append(out.Music, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "timestamp_utc":
			out.TimestampUTC = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240Encode1(out *jwriter.Writer, in struct {
	PlayedDuration int `json:"played_duration"`
	Music          []struct {
		ExternalIDs struct {
			Isrc string `json:"isrc"`
			Upc  string `json:"upc"`
		} `json:"external_ids"`
		SampleBeginTimeOffsetMs string `json:"sample_begin_time_offset_ms"`
		Label                   string `json:"label"`
		ExternalMetadata        struct {
			Spotify struct {
				Album struct {
					ID string `json:"id"`
				} `json:"album"`
				Artists []struct {
					ID string `json:"id"`
				}
				Track struct {
					ID string `json:"id"`
				} `json:"track"`
			} `json:"spotify"`
		} `json:"external_metadata"`
		PlayOffsetMS int `json:"play_offset_ms"`
		Artists      []struct {
			Name string `json:"name"`
		} `json:"artists"`
		SampleEndTimeOffsetMS string `json:"sample_end_time_offset_ms"`
		ReleaseDate           string `json:"release_date"`
		Title                 string `json:"title"`
		DbEndTimeOffsetMS     string `json:"db_end_time_offset_ms"`
		DbBeginTimeOffsetMS   string `json:"db_begin_time_offset_ms"`
		DurationMS            int    `json:"duration_ms"`
		Album                 struct {
			Name string `json:"name"`
		} `json:"album"`
		Score int `json:"score"`
	} `json:"music"`
	TimestampUTC string `json:"timestamp_utc"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"played_duration\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PlayedDuration))
	}
	{
		const prefix string = ",\"music\":"
		out.RawString(prefix)
		if in.Music == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Music {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson66c1e240Encode2(out, v3)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"timestamp_utc\":"
		out.RawString(prefix)
		out.String(string(in.TimestampUTC))
	}
	out.RawByte('}')
}
func easyjson66c1e240Decode2(in *jlexer.Lexer, out *struct {
	ExternalIDs struct {
		Isrc string `json:"isrc"`
		Upc  string `json:"upc"`
	} `json:"external_ids"`
	SampleBeginTimeOffsetMs string `json:"sample_begin_time_offset_ms"`
	Label                   string `json:"label"`
	ExternalMetadata        struct {
		Spotify struct {
			Album struct {
				ID string `json:"id"`
			} `json:"album"`
			Artists []struct {
				ID string `json:"id"`
			}
			Track struct {
				ID string `json:"id"`
			} `json:"track"`
		} `json:"spotify"`
	} `json:"external_metadata"`
	PlayOffsetMS int `json:"play_offset_ms"`
	Artists      []struct {
		Name string `json:"name"`
	} `json:"artists"`
	SampleEndTimeOffsetMS string `json:"sample_end_time_offset_ms"`
	ReleaseDate           string `json:"release_date"`
	Title                 string `json:"title"`
	DbEndTimeOffsetMS     string `json:"db_end_time_offset_ms"`
	DbBeginTimeOffsetMS   string `json:"db_begin_time_offset_ms"`
	DurationMS            int    `json:"duration_ms"`
	Album                 struct {
		Name string `json:"name"`
	} `json:"album"`
	Score int `json:"score"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "external_ids":
			easyjson66c1e240Decode3(in, &out.ExternalIDs)
		case "sample_begin_time_offset_ms":
			out.SampleBeginTimeOffsetMs = string(in.String())
		case "label":
			out.Label = string(in.String())
		case "external_metadata":
			easyjson66c1e240Decode4(in, &out.ExternalMetadata)
		case "play_offset_ms":
			out.PlayOffsetMS = int(in.Int())
		case "artists":
			if in.IsNull() {
				in.Skip()
				out.Artists = nil
			} else {
				in.Delim('[')
				if out.Artists == nil {
					if !in.IsDelim(']') {
						out.Artists = make([]struct {
							Name string `json:"name"`
						}, 0, 4)
					} else {
						out.Artists = []struct {
							Name string `json:"name"`
						}{}
					}
				} else {
					out.Artists = (out.Artists)[:0]
				}
				for !in.IsDelim(']') {
					var v4 struct {
						Name string `json:"name"`
					}
					easyjson66c1e240Decode5(in, &v4)
					out.Artists = append(out.Artists, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sample_end_time_offset_ms":
			out.SampleEndTimeOffsetMS = string(in.String())
		case "release_date":
			out.ReleaseDate = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "db_end_time_offset_ms":
			out.DbEndTimeOffsetMS = string(in.String())
		case "db_begin_time_offset_ms":
			out.DbBeginTimeOffsetMS = string(in.String())
		case "duration_ms":
			out.DurationMS = int(in.Int())
		case "album":
			easyjson66c1e240Decode5(in, &out.Album)
		case "score":
			out.Score = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240Encode2(out *jwriter.Writer, in struct {
	ExternalIDs struct {
		Isrc string `json:"isrc"`
		Upc  string `json:"upc"`
	} `json:"external_ids"`
	SampleBeginTimeOffsetMs string `json:"sample_begin_time_offset_ms"`
	Label                   string `json:"label"`
	ExternalMetadata        struct {
		Spotify struct {
			Album struct {
				ID string `json:"id"`
			} `json:"album"`
			Artists []struct {
				ID string `json:"id"`
			}
			Track struct {
				ID string `json:"id"`
			} `json:"track"`
		} `json:"spotify"`
	} `json:"external_metadata"`
	PlayOffsetMS int `json:"play_offset_ms"`
	Artists      []struct {
		Name string `json:"name"`
	} `json:"artists"`
	SampleEndTimeOffsetMS string `json:"sample_end_time_offset_ms"`
	ReleaseDate           string `json:"release_date"`
	Title                 string `json:"title"`
	DbEndTimeOffsetMS     string `json:"db_end_time_offset_ms"`
	DbBeginTimeOffsetMS   string `json:"db_begin_time_offset_ms"`
	DurationMS            int    `json:"duration_ms"`
	Album                 struct {
		Name string `json:"name"`
	} `json:"album"`
	Score int `json:"score"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"external_ids\":"
		out.RawString(prefix[1:])
		easyjson66c1e240Encode3(out, in.ExternalIDs)
	}
	{
		const prefix string = ",\"sample_begin_time_offset_ms\":"
		out.RawString(prefix)
		out.String(string(in.SampleBeginTimeOffsetMs))
	}
	{
		const prefix string = ",\"label\":"
		out.RawString(prefix)
		out.String(string(in.Label))
	}
	{
		const prefix string = ",\"external_metadata\":"
		out.RawString(prefix)
		easyjson66c1e240Encode4(out, in.ExternalMetadata)
	}
	{
		const prefix string = ",\"play_offset_ms\":"
		out.RawString(prefix)
		out.Int(int(in.PlayOffsetMS))
	}
	{
		const prefix string = ",\"artists\":"
		out.RawString(prefix)
		if in.Artists == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Artists {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson66c1e240Encode5(out, v6)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"sample_end_time_offset_ms\":"
		out.RawString(prefix)
		out.String(string(in.SampleEndTimeOffsetMS))
	}
	{
		const prefix string = ",\"release_date\":"
		out.RawString(prefix)
		out.String(string(in.ReleaseDate))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"db_end_time_offset_ms\":"
		out.RawString(prefix)
		out.String(string(in.DbEndTimeOffsetMS))
	}
	{
		const prefix string = ",\"db_begin_time_offset_ms\":"
		out.RawString(prefix)
		out.String(string(in.DbBeginTimeOffsetMS))
	}
	{
		const prefix string = ",\"duration_ms\":"
		out.RawString(prefix)
		out.Int(int(in.DurationMS))
	}
	{
		const prefix string = ",\"album\":"
		out.RawString(prefix)
		easyjson66c1e240Encode5(out, in.Album)
	}
	{
		const prefix string = ",\"score\":"
		out.RawString(prefix)
		out.Int(int(in.Score))
	}
	out.RawByte('}')
}
func easyjson66c1e240Decode5(in *jlexer.Lexer, out *struct {
	Name string `json:"name"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240Encode5(out *jwriter.Writer, in struct {
	Name string `json:"name"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson66c1e240Decode4(in *jlexer.Lexer, out *struct {
	Spotify struct {
		Album struct {
			ID string `json:"id"`
		} `json:"album"`
		Artists []struct {
			ID string `json:"id"`
		}
		Track struct {
			ID string `json:"id"`
		} `json:"track"`
	} `json:"spotify"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "spotify":
			easyjson66c1e240Decode6(in, &out.Spotify)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240Encode4(out *jwriter.Writer, in struct {
	Spotify struct {
		Album struct {
			ID string `json:"id"`
		} `json:"album"`
		Artists []struct {
			ID string `json:"id"`
		}
		Track struct {
			ID string `json:"id"`
		} `json:"track"`
	} `json:"spotify"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"spotify\":"
		out.RawString(prefix[1:])
		easyjson66c1e240Encode6(out, in.Spotify)
	}
	out.RawByte('}')
}
func easyjson66c1e240Decode6(in *jlexer.Lexer, out *struct {
	Album struct {
		ID string `json:"id"`
	} `json:"album"`
	Artists []struct {
		ID string `json:"id"`
	}
	Track struct {
		ID string `json:"id"`
	} `json:"track"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "album":
			easyjson66c1e240Decode7(in, &out.Album)
		case "Artists":
			if in.IsNull() {
				in.Skip()
				out.Artists = nil
			} else {
				in.Delim('[')
				if out.Artists == nil {
					if !in.IsDelim(']') {
						out.Artists = make([]struct {
							ID string `json:"id"`
						}, 0, 4)
					} else {
						out.Artists = []struct {
							ID string `json:"id"`
						}{}
					}
				} else {
					out.Artists = (out.Artists)[:0]
				}
				for !in.IsDelim(']') {
					var v7 struct {
						ID string `json:"id"`
					}
					easyjson66c1e240Decode7(in, &v7)
					out.Artists = append(out.Artists, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "track":
			easyjson66c1e240Decode7(in, &out.Track)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240Encode6(out *jwriter.Writer, in struct {
	Album struct {
		ID string `json:"id"`
	} `json:"album"`
	Artists []struct {
		ID string `json:"id"`
	}
	Track struct {
		ID string `json:"id"`
	} `json:"track"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"album\":"
		out.RawString(prefix[1:])
		easyjson66c1e240Encode7(out, in.Album)
	}
	{
		const prefix string = ",\"Artists\":"
		out.RawString(prefix)
		if in.Artists == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Artists {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjson66c1e240Encode7(out, v9)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"track\":"
		out.RawString(prefix)
		easyjson66c1e240Encode7(out, in.Track)
	}
	out.RawByte('}')
}
func easyjson66c1e240Decode7(in *jlexer.Lexer, out *struct {
	ID string `json:"id"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240Encode7(out *jwriter.Writer, in struct {
	ID string `json:"id"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	out.RawByte('}')
}
func easyjson66c1e240Decode3(in *jlexer.Lexer, out *struct {
	Isrc string `json:"isrc"`
	Upc  string `json:"upc"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "isrc":
			out.Isrc = string(in.String())
		case "upc":
			out.Upc = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240Encode3(out *jwriter.Writer, in struct {
	Isrc string `json:"isrc"`
	Upc  string `json:"upc"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"isrc\":"
		out.RawString(prefix[1:])
		out.String(string(in.Isrc))
	}
	{
		const prefix string = ",\"upc\":"
		out.RawString(prefix)
		out.String(string(in.Upc))
	}
	out.RawByte('}')
}
func easyjson66c1e240Decode(in *jlexer.Lexer, out *struct {
	Message string `json:"msg"`
	Code    int    `json:"code"`
	Version string `json:"version"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msg":
			out.Message = string(in.String())
		case "code":
			out.Code = int(in.Int())
		case "version":
			out.Version = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240Encode(out *jwriter.Writer, in struct {
	Message string `json:"msg"`
	Code    int    `json:"code"`
	Version string `json:"version"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	out.RawByte('}')
}
